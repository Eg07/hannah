stages:
  - build
  - test
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_HOME: "$CI_PROJECT_DIR/.poetry"
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - cat /etc/os-release
  - source /etc/os-release
  - if [[ $ID == "debian" || $ID == "ubuntu" ]]; then
  - apt update
  - apt -y install python3-dev libblas-dev liblapack-dev libsndfile1-dev libsox-dev
  - else
  - yum install epel-release -y
  - yum install git sudo python36 -y
  - yum install wget curl -y
  - yum groupinstall 'Development Tools' -y
  - fi

  # Install poetry using recommended method
  - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
  - export PATH=${POETRY_HOME}/bin:${PATH}

  # Work around: https://github.com/python-poetry/poetry/issues/3199
  - poetry config experimental.new-installer false

  # install and manage dependencies with poetry
  - poetry install

  # Show limits
  - ulimit -a


test_python_37:
  image: python:3.7
  stage: test
  script:
    - set -e
    - poetry run python3 -m pytest  -v --cov=speech_recognition test
  tags:
    - docker
  interruptible: true

test_python_38:
  stage: test
  image: python:3.8
  script:
    - set -e
    - poetry run python3 -m pytest  -v --cov=speech_recognition test
  tags:
    - docker
  interruptible: true
  except:
    - branches

test_python_39:
  stage: test
  image: python:3.9
  script:
    - set -e
    - poetry run python3 -m pytest -v --cov=speech_recognition test
  tags:
    - docker
  interruptible: true

build_docs:
  stage: deploy
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    paths:
      - .cache/pip
      - venv

  before_script:
    - python3 -m virtualenv venv
    - source venv/bin/activate
    - pip install --upgrade pydoc-markdown
    - pip install --upgrade mkdocs
    - pip install --upgrade pymdown-extensions

  allow_failure: true
  script:
    - pydoc-markdown --build --site-dir /afs/wsi/home/gerum/public_html/hannah
  tags:
    - afs
    - native
  only:
    - master

build_image:
  stage: build
  before_script:
    - echo build
  image:
    name: quay.io/singularity/singularity:v3.7.3
    entrypoint: [""]
  
  tags:
    - docker
    - privileged
  script: 
    - cd ml_cloud
    - singularity build ml_cloud.simg ml_cloud.recipe
  only:
    - master
  
  